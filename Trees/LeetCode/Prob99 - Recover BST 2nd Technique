/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void recoverTree(TreeNode root) {
        TreeNode[] nodes = new TreeNode[2];
        TreeNode[] prev = new TreeNode[1];
        inorderTraversal(root, nodes, prev);
        if (nodes[0] != null && nodes[1] != null) {
            int temp = nodes[0].val;
            nodes[0].val = nodes[1].val;
            nodes[1].val = temp;
        }
    }

    private void inorderTraversal(TreeNode root, TreeNode[] nodes, TreeNode[] prev) {
        if (root == null) {
            return;
        }
        inorderTraversal(root.left, nodes, prev);
        if (prev[0] != null && root.val < prev[0].val) {
            if (nodes[0] == null) {
                nodes[0] = prev[0];
            }
            nodes[1] = root;
        }
        prev[0] = root;
        inorderTraversal(root.right, nodes, prev);
    }
}