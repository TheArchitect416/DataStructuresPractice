/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> indexMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            indexMap.put(inorder[i], i);
        }
        return build(preorder, 0, 0, inorder.length - 1, indexMap);
    }

    private TreeNode build(int[] preorder, int preStart, int inStart, int inEnd, Map<Integer, Integer> indexMap) {
        if (inStart > inEnd || preStart >= preorder.length) {
            return null;
        }
        int rootVal = preorder[preStart];
        TreeNode root = new TreeNode(rootVal);
        int inorderIndex = indexMap.get(rootVal);
        int leftTreeSize = inorderIndex - inStart;
        root.left = build(preorder, preStart + 1, inStart, inorderIndex - 1, indexMap);
        root.right = build(preorder, preStart + 1 + leftTreeSize, inorderIndex + 1, inEnd, indexMap);
        return root;
    }
}