Initial Approach: (optimized approach below)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> order = new ArrayList<>();
        if (root == null) return order;

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean reverse = false;

        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> level = new ArrayList<>(size);

            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                level.add(node.val);

                if (node.left != null)  q.offer(node.left);
                if (node.right != null) q.offer(node.right);
            }

            if (reverse) Collections.reverse(level);
            order.add(level);
            reverse = !reverse;
        }
        return order;
    }
}




------------------------------------------------------------------------------------------------------------------------

Optimized Approach:


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean leftToRight = true;
        while(!q.isEmpty()) {
            int currLevelSize = q.size();
            LinkedList currLevel = new LinkedList<>();

            for(int i = 0; i < currLevelSize; i++) {
                TreeNode temp = q.poll();
                if(leftToRight) {
                    currLevel.addLast(temp.val);
                } else {
                    currLevel.addFirst(temp.val);
                }
                if(temp.left != null) q.offer(temp.left);
                if(temp.right != null) q.offer(temp.right);
            }
            result.add(currLevel);
            leftToRight = !leftToRight;
        }
        return result;
    }
}